@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
<div class="task_line_main">
    <div class="timeline_edit">
        <input type="date" @bind="MinDate" />
        <input type="date" @bind="MaxData" />
    </div>

    <div class="timeline_edit2">
        <p><span class="oi oi-media-stop" style="color: @TaskColor.Define;"></span>@(AssetTasks.Count(a => a.Status == QNWebServer.Data.TaskStatus.Define))个未开始</p>
        <p><span class="oi oi-media-stop" style="color: @TaskColor.Start;"></span>@(AssetTasks.Count(a => a.Status == QNWebServer.Data.TaskStatus.Start))个进行中</p>
        <p><span class="oi oi-media-stop" style="color: @TaskColor.Modify;"></span>@(AssetTasks.Count(a => a.Status == QNWebServer.Data.TaskStatus.Modify))个修改中</p>
        <p><span class="oi oi-media-stop" style="color: @TaskColor.Finished;"></span>@(AssetTasks.Count(a => a.Status == QNWebServer.Data.TaskStatus.Finished))个完成</p>
    </div>
    <div class="timeline">
        @for (int i = 0; i < 100; i++)
        {
            <p style="left: @(i)%;">|</p>
        }
    </div>
    <br>
    <div>
    @if(AssetTasks != null)
    {
        <ul>
            @foreach (var item in AssetTasks)
            {
                <li class="attl_item" @ondblclick="@(() => ToTask(item.ProjectTaskId))" style="width: @(MyLength(item.StartDate,item.EndDate))%; left:@(MyPos(item.StartDate))%;background-color: rgb(@TaskColor.ColorLibs[(int)(item.Status)].R,@TaskColor.ColorLibs[(int)(item.Status)].G,@TaskColor.ColorLibs[(int)(item.Status)].B);">
                    <span>@item.Name</span>
                </li>
            }
        </ul>
    }
    </div>
</div>

@code
{
    [Parameter]
    public List<ProjectTask>? AssetTasks {get;set;}

    [Parameter]
    public DateTime MinDate {get;set;}
    [Parameter]
    public DateTime MaxData {get;set;}

    public double MaxUnit {get
                        {
                            if(MinDate > MaxData) return 0;
                            return (MaxData-MinDate).TotalMinutes;
                        }
                        }
    

    protected override void OnInitialized()
    {
        TimeSpan a = new(15,0,0,0);
        MinDate = DateTime.Now - a;
        MaxData = DateTime.Now + a;
    }
    
    private double MyLength(DateTime a, DateTime b)
    {
        if(a>=b) return 0.3;
        return (((b-a).TotalMinutes / (double)MaxUnit) * 100);
    }

    private double MyPos(DateTime a)
    {
        if(a < MinDate) return 0;
        if( a > MaxData) return 100;
        return ((a-MinDate).TotalMinutes / MaxUnit)*100;
    }

    private async void ToTask(int id)
    {
        await Task.Delay(0);  
        NavigationManager.NavigateTo(NavigationManager.BaseUri + $"project/tasks/{id}");
        
    }
}


