@page "/user/register"
@implements IDisposable
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager

@inject IJSRuntime IJSRuntime
<div class="login_box">
    <div class="login_main"><h1>新用户注册</h1></div>
    <EditForm EditContext=editContext OnValidSubmit=PlaceOrder class="login_main">
        <DataAnnotationsValidator />
        <div class="login_item">
            <span class="login_label">显示名称:</span><InputText id="displayname" @bind-Value="user.DisplayName" />
        </div>
        <div>
            <ValidationMessage For="@(()=> user.DisplayName)"/>
        </div>
        <div class="login_item">
            <span class="login_label">注册名称:</span><InputText id="name" @bind-Value="user.Name" />
        </div>
        <div class="login_item">
            <ValidationMessage For="@(()=> user.Name)"/>
        </div>
        <div class="login_item">
            <span class="login_label">密码设置:</span><InputText id="password" @bind-Value="user.Password" />
        </div>
        <div>
            <ValidationMessage For="@(()=> user.Password)"/>
        </div>
        <div class="login_item">
            <span class="login_label">注册类型:</span><InputSelect id="type" @bind-Value="user.Type">
                @foreach (var item in Enum.GetValues(typeof(UsersType)))
                {
                    <option value="@item">@item</option>
                }
            </InputSelect>
        </div>
        <div class="login_item">
            <ValidationMessage For="@(()=> user.Type)"/>
        </div>

        <div class="login_submit">
            <button class="login_button" type="Submit" disabled=@isError>提交</button>
        </div>
        
    </EditForm>
</div>


@code
{
    private bool isError = true;
    private string rePassword ="";
    private EditContext editContext;
    private Users user =new(){Type=UsersType.Anim};

    protected override void OnInitialized()
    {
        editContext = new EditContext(user);
        editContext.OnFieldChanged += HandleFieldChanged;
    }
    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        isError = !editContext.Validate();
        StateHasChanged();
    }
    public void Dispose()
    {
        editContext.OnFieldChanged -= HandleFieldChanged;
    }

    async Task PlaceOrder()
    {
        var response=await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri+"admin/register",user);
        var ok = await response.Content.ReadFromJsonAsync<bool>();
        if(!ok)
            await IJSRuntime.InvokeVoidAsync("alert","注册失败！可能该用户已存在");
        else
            NavigationManager.NavigateTo("user/login");
    }
}

