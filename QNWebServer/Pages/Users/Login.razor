@page "/user/login"
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@inject IJSRuntime IJSRuntime
@inject ProtectedSessionStorage ProtectedSessionStorage

<div class="login_main">
    <h3 class="login_text">登录系统</h3>
    <EditForm Model=loginUser OnValidSubmit=LoginU class="login_form">
        <DataAnnotationsValidator/>
        <div class="login_item">
            <p>名称:</p><InputText @bind-Value="loginUser.Name" style="width: 100%;border-radius: 3px;border-width:0px"/>
            <ValidationMessage For="@(() => loginUser.Name)" />
        </div>
        <br/>
        <div class="login_item">
            <p>密码:</p><input type="password" @bind="loginUser.Password" style="width: 100%;border-radius: 3px;border-width:0px"/>
            <ValidationMessage For="@(() => loginUser.Password)" />
        </div>
        <br>
        <button type="submit" class="login_button">登录</button>
    </EditForm>
</div>


@code
{
    private LoginUser loginUser = new();
    async void LoginU()
    {
        if(!string.IsNullOrWhiteSpace(loginUser.Name) && !string.IsNullOrWhiteSpace(loginUser.Password))
        {
            var response=await HttpClient.PostAsJsonAsync(NavigationManager.BaseUri+"admin/login",loginUser);
            UserLoginState? state=await response.Content.ReadFromJsonAsync<UserLoginState>();
            if(state.Name != null)
            {
                await IJSRuntime.InvokeVoidAsync("alert",$"登录成功！欢迎{state.DisplayName}");
                await ProtectedSessionStorage.SetAsync("UserState",state);
                NavigationManager.NavigateTo("/");
            }
            else
            {
                await IJSRuntime.InvokeVoidAsync("alert","登录失败！你可能使用了错误的密码和账户");
            }
        }
    }

}